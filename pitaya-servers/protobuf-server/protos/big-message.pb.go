// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: big-message.proto

/*
	Package protos is a generated protocol buffer package.

	It is generated from these files:
		big-message.proto

	It has these top-level messages:
		PlayerResponse
		NPC
		BigMessageResponse
		BigMessage
*/
package protos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import binary "encoding/binary"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type PlayerResponse struct {
	PublicId    string   `protobuf:"bytes,1,opt,name=publicId,proto3" json:"publicId,omitempty"`
	AccessToken string   `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	Name        string   `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Items       []string `protobuf:"bytes,4,rep,name=items" json:"items,omitempty"`
	Health      float64  `protobuf:"fixed64,5,opt,name=health,proto3" json:"health,omitempty"`
}

func (m *PlayerResponse) Reset()                    { *m = PlayerResponse{} }
func (m *PlayerResponse) String() string            { return proto.CompactTextString(m) }
func (*PlayerResponse) ProtoMessage()               {}
func (*PlayerResponse) Descriptor() ([]byte, []int) { return fileDescriptorBigMessage, []int{0} }

func (m *PlayerResponse) GetPublicId() string {
	if m != nil {
		return m.PublicId
	}
	return ""
}

func (m *PlayerResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *PlayerResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *PlayerResponse) GetItems() []string {
	if m != nil {
		return m.Items
	}
	return nil
}

func (m *PlayerResponse) GetHealth() float64 {
	if m != nil {
		return m.Health
	}
	return 0
}

type NPC struct {
	Name     string  `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Health   float64 `protobuf:"fixed64,2,opt,name=health,proto3" json:"health,omitempty"`
	PublicId string  `protobuf:"bytes,3,opt,name=publicId,proto3" json:"publicId,omitempty"`
}

func (m *NPC) Reset()                    { *m = NPC{} }
func (m *NPC) String() string            { return proto.CompactTextString(m) }
func (*NPC) ProtoMessage()               {}
func (*NPC) Descriptor() ([]byte, []int) { return fileDescriptorBigMessage, []int{1} }

func (m *NPC) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *NPC) GetHealth() float64 {
	if m != nil {
		return m.Health
	}
	return 0
}

func (m *NPC) GetPublicId() string {
	if m != nil {
		return m.PublicId
	}
	return ""
}

type BigMessageResponse struct {
	Player *PlayerResponse `protobuf:"bytes,1,opt,name=player" json:"player,omitempty"`
	Npcs   map[string]*NPC `protobuf:"bytes,2,rep,name=npcs" json:"npcs,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value"`
	Chests []string        `protobuf:"bytes,3,rep,name=chests" json:"chests,omitempty"`
}

func (m *BigMessageResponse) Reset()                    { *m = BigMessageResponse{} }
func (m *BigMessageResponse) String() string            { return proto.CompactTextString(m) }
func (*BigMessageResponse) ProtoMessage()               {}
func (*BigMessageResponse) Descriptor() ([]byte, []int) { return fileDescriptorBigMessage, []int{2} }

func (m *BigMessageResponse) GetPlayer() *PlayerResponse {
	if m != nil {
		return m.Player
	}
	return nil
}

func (m *BigMessageResponse) GetNpcs() map[string]*NPC {
	if m != nil {
		return m.Npcs
	}
	return nil
}

func (m *BigMessageResponse) GetChests() []string {
	if m != nil {
		return m.Chests
	}
	return nil
}

type BigMessage struct {
	Code     string              `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Response *BigMessageResponse `protobuf:"bytes,2,opt,name=response" json:"response,omitempty"`
}

func (m *BigMessage) Reset()                    { *m = BigMessage{} }
func (m *BigMessage) String() string            { return proto.CompactTextString(m) }
func (*BigMessage) ProtoMessage()               {}
func (*BigMessage) Descriptor() ([]byte, []int) { return fileDescriptorBigMessage, []int{3} }

func (m *BigMessage) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *BigMessage) GetResponse() *BigMessageResponse {
	if m != nil {
		return m.Response
	}
	return nil
}

func init() {
	proto.RegisterType((*PlayerResponse)(nil), "protos.PlayerResponse")
	proto.RegisterType((*NPC)(nil), "protos.NPC")
	proto.RegisterType((*BigMessageResponse)(nil), "protos.BigMessageResponse")
	proto.RegisterType((*BigMessage)(nil), "protos.BigMessage")
}
func (m *PlayerResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PlayerResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.PublicId) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigMessage(dAtA, i, uint64(len(m.PublicId)))
		i += copy(dAtA[i:], m.PublicId)
	}
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBigMessage(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	if len(m.Name) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBigMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if len(m.Items) > 0 {
		for _, s := range m.Items {
			dAtA[i] = 0x22
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	if m.Health != 0 {
		dAtA[i] = 0x29
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Health))))
		i += 8
	}
	return i, nil
}

func (m *NPC) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NPC) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigMessage(dAtA, i, uint64(len(m.Name)))
		i += copy(dAtA[i:], m.Name)
	}
	if m.Health != 0 {
		dAtA[i] = 0x11
		i++
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Health))))
		i += 8
	}
	if len(m.PublicId) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintBigMessage(dAtA, i, uint64(len(m.PublicId)))
		i += copy(dAtA[i:], m.PublicId)
	}
	return i, nil
}

func (m *BigMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Player != nil {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigMessage(dAtA, i, uint64(m.Player.Size()))
		n1, err := m.Player.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if len(m.Npcs) > 0 {
		for k, _ := range m.Npcs {
			dAtA[i] = 0x12
			i++
			v := m.Npcs[k]
			msgSize := 0
			if v != nil {
				msgSize = v.Size()
				msgSize += 1 + sovBigMessage(uint64(msgSize))
			}
			mapSize := 1 + len(k) + sovBigMessage(uint64(len(k))) + msgSize
			i = encodeVarintBigMessage(dAtA, i, uint64(mapSize))
			dAtA[i] = 0xa
			i++
			i = encodeVarintBigMessage(dAtA, i, uint64(len(k)))
			i += copy(dAtA[i:], k)
			if v != nil {
				dAtA[i] = 0x12
				i++
				i = encodeVarintBigMessage(dAtA, i, uint64(v.Size()))
				n2, err := v.MarshalTo(dAtA[i:])
				if err != nil {
					return 0, err
				}
				i += n2
			}
		}
	}
	if len(m.Chests) > 0 {
		for _, s := range m.Chests {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *BigMessage) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BigMessage) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Code) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintBigMessage(dAtA, i, uint64(len(m.Code)))
		i += copy(dAtA[i:], m.Code)
	}
	if m.Response != nil {
		dAtA[i] = 0x12
		i++
		i = encodeVarintBigMessage(dAtA, i, uint64(m.Response.Size()))
		n3, err := m.Response.MarshalTo(dAtA[i:])
		if err != nil {
			return 0, err
		}
		i += n3
	}
	return i, nil
}

func encodeVarintBigMessage(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *PlayerResponse) Size() (n int) {
	var l int
	_ = l
	l = len(m.PublicId)
	if l > 0 {
		n += 1 + l + sovBigMessage(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovBigMessage(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBigMessage(uint64(l))
	}
	if len(m.Items) > 0 {
		for _, s := range m.Items {
			l = len(s)
			n += 1 + l + sovBigMessage(uint64(l))
		}
	}
	if m.Health != 0 {
		n += 9
	}
	return n
}

func (m *NPC) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovBigMessage(uint64(l))
	}
	if m.Health != 0 {
		n += 9
	}
	l = len(m.PublicId)
	if l > 0 {
		n += 1 + l + sovBigMessage(uint64(l))
	}
	return n
}

func (m *BigMessageResponse) Size() (n int) {
	var l int
	_ = l
	if m.Player != nil {
		l = m.Player.Size()
		n += 1 + l + sovBigMessage(uint64(l))
	}
	if len(m.Npcs) > 0 {
		for k, v := range m.Npcs {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.Size()
				l += 1 + sovBigMessage(uint64(l))
			}
			mapEntrySize := 1 + len(k) + sovBigMessage(uint64(len(k))) + l
			n += mapEntrySize + 1 + sovBigMessage(uint64(mapEntrySize))
		}
	}
	if len(m.Chests) > 0 {
		for _, s := range m.Chests {
			l = len(s)
			n += 1 + l + sovBigMessage(uint64(l))
		}
	}
	return n
}

func (m *BigMessage) Size() (n int) {
	var l int
	_ = l
	l = len(m.Code)
	if l > 0 {
		n += 1 + l + sovBigMessage(uint64(l))
	}
	if m.Response != nil {
		l = m.Response.Size()
		n += 1 + l + sovBigMessage(uint64(l))
	}
	return n
}

func sovBigMessage(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozBigMessage(x uint64) (n int) {
	return sovBigMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *PlayerResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PlayerResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PlayerResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Items", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Items = append(m.Items, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Health = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipBigMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NPC) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NPC: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NPC: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Health", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Health = float64(math.Float64frombits(v))
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PublicId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PublicId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BigMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Player", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Player == nil {
				m.Player = &PlayerResponse{}
			}
			if err := m.Player.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Npcs", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Npcs == nil {
				m.Npcs = make(map[string]*NPC)
			}
			var mapkey string
			var mapvalue *NPC
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowBigMessage
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= (uint64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return ErrInvalidLengthBigMessage
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowBigMessage
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthBigMessage
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthBigMessage
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &NPC{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipBigMessage(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthBigMessage
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Npcs[mapkey] = mapvalue
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Chests", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Chests = append(m.Chests, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BigMessage) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBigMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BigMessage: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BigMessage: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBigMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Code = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthBigMessage
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Response == nil {
				m.Response = &BigMessageResponse{}
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipBigMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthBigMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBigMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBigMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBigMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthBigMessage
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowBigMessage
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipBigMessage(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthBigMessage = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBigMessage   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("big-message.proto", fileDescriptorBigMessage) }

var fileDescriptorBigMessage = []byte{
	// 351 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x52, 0xc1, 0x6a, 0xc2, 0x40,
	0x10, 0xed, 0x66, 0x55, 0x74, 0x02, 0xc5, 0x2e, 0x45, 0x16, 0x0f, 0x21, 0x0d, 0x3d, 0xe4, 0xd2,
	0x1c, 0x2c, 0x14, 0xe9, 0x51, 0xdb, 0x43, 0x0f, 0x8a, 0x2c, 0x3d, 0xf4, 0x1a, 0xd7, 0x45, 0x83,
	0x31, 0x09, 0x99, 0x58, 0xf0, 0x2f, 0x7a, 0xec, 0x27, 0xf5, 0xd8, 0x0f, 0xe8, 0xa1, 0xd8, 0x1f,
	0x29, 0xd9, 0xc4, 0x68, 0x28, 0x3d, 0x65, 0x26, 0xf3, 0xe6, 0xcd, 0x7b, 0x8f, 0x85, 0x8b, 0x79,
	0xb0, 0xbc, 0xd9, 0x28, 0x44, 0x7f, 0xa9, 0xbc, 0x24, 0x8d, 0xb3, 0x98, 0xb5, 0xf4, 0x07, 0x9d,
	0x37, 0x02, 0xe7, 0xb3, 0xd0, 0xdf, 0xa9, 0x54, 0x28, 0x4c, 0xe2, 0x08, 0x15, 0xeb, 0x43, 0x3b,
	0xd9, 0xce, 0xc3, 0x40, 0x3e, 0x2d, 0x38, 0xb1, 0x89, 0xdb, 0x11, 0x55, 0xcf, 0x6c, 0x30, 0x7d,
	0x29, 0x15, 0xe2, 0x73, 0xbc, 0x56, 0x11, 0x37, 0xf4, 0xf8, 0xf4, 0x17, 0x63, 0xd0, 0x88, 0xfc,
	0x8d, 0xe2, 0x54, 0x8f, 0x74, 0xcd, 0x2e, 0xa1, 0x19, 0x64, 0x6a, 0x83, 0xbc, 0x61, 0x53, 0xb7,
	0x23, 0x8a, 0x86, 0xf5, 0xa0, 0xb5, 0x52, 0x7e, 0x98, 0xad, 0x78, 0xd3, 0x26, 0x2e, 0x11, 0x65,
	0xe7, 0x4c, 0x80, 0x4e, 0x67, 0xe3, 0x8a, 0x88, 0x9c, 0x10, 0x1d, 0x57, 0x8c, 0xd3, 0x95, 0x9a,
	0x64, 0x5a, 0x97, 0xec, 0x7c, 0x11, 0x60, 0xa3, 0x60, 0x39, 0x29, 0xec, 0x57, 0x2e, 0x3d, 0x68,
	0x25, 0xda, 0xb7, 0x3e, 0x60, 0x0e, 0x7a, 0x45, 0x30, 0xe8, 0xd5, 0xd3, 0x10, 0x25, 0x8a, 0x0d,
	0xa1, 0x11, 0x25, 0x12, 0xb9, 0x61, 0x53, 0xd7, 0x1c, 0x5c, 0x1f, 0xd0, 0x7f, 0x99, 0xbd, 0x69,
	0x22, 0xf1, 0x31, 0xca, 0xd2, 0x9d, 0xd0, 0x1b, 0xb9, 0x68, 0xb9, 0x52, 0x98, 0x21, 0xa7, 0xda,
	0x7e, 0xd9, 0xf5, 0x1f, 0xa0, 0x53, 0x41, 0x59, 0x17, 0xe8, 0x5a, 0xed, 0x4a, 0xb3, 0x79, 0xc9,
	0xae, 0xa0, 0xf9, 0xea, 0x87, 0x5b, 0xa5, 0xad, 0x9a, 0x03, 0xf3, 0x70, 0x71, 0x3a, 0x1b, 0x8b,
	0x62, 0x72, 0x6f, 0x0c, 0x89, 0xf3, 0x02, 0x70, 0xd4, 0x90, 0x87, 0x26, 0xe3, 0x45, 0x15, 0x5a,
	0x5e, 0xb3, 0x3b, 0x68, 0xa7, 0xa5, 0xb6, 0x92, 0xab, 0xff, 0xbf, 0x7a, 0x51, 0x61, 0x47, 0xdd,
	0x8f, 0xbd, 0x45, 0x3e, 0xf7, 0x16, 0xf9, 0xde, 0x5b, 0xe4, 0xfd, 0xc7, 0x3a, 0x9b, 0x17, 0x8f,
	0xe6, 0xf6, 0x37, 0x00, 0x00, 0xff, 0xff, 0x74, 0xad, 0x31, 0xc0, 0x50, 0x02, 0x00, 0x00,
}
